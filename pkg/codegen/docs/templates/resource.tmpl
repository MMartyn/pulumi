{{ htmlSafe "<!-- WARNING: this file was generated by" }} {{ .Tool }}. {{ htmlSafe "-->" }}
{{ htmlSafe "<!-- Do not edit by hand unless you're certain you know what you are doing! -->" }}

# {{ .Header.Title }} Component

{{- if .DeprecationMessage }}
!!! Deprecated
    This resource is currently deprecated.
{{- end }}

<!-- Create resource -->
## Create {{ .Header.Title }} Resource {#create}

=== "Typescript"
    <div class="highlight"><pre class="chroma"><code class="language-typescript" data-lang="typescript"><span class="k">new </span>{{ template "linkify_param" .ConstructorResource.nodejs }}<span class="p">(</span>{{ htmlSafe .ConstructorParams.nodejs }}<span class="p">);</span></code></pre></div>
    {{ template "constructor_args" .ConstructorParamsTyped.nodejs }}

=== "Python"
    <div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class=nd>@overload</span>
    <span class="k">def </span>{{ template "linkify_param" .ConstructorResource.python }}<span class="p">(</span>{{ htmlSafe .ConstructorParams.python }}<span class="p">)</span>
    <span class=nd>@overload</span>
    <span class="k">def </span>{{ template "linkify_param" .ConstructorResource.python }}<span class="p">(</span>{{ htmlSafe .ConstructorParams.pythonargs }}<span class="p">)</span></code></pre></div>
    {{ template "constructor_args" .ConstructorParamsTyped.pythonargs }}

=== "Go"
    <div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="k">func </span>{{ template "linkify_go_param" .ConstructorResource.go }}<span class="p">(</span>{{ htmlSafe .ConstructorParams.go }}<span class="p">) (*{{ template "linkify_param" .ConstructorResource.go }}, error)</span></code></pre></div>
    {{ template "constructor_args" .ConstructorParamsTyped.go }}

=== "C#"
    <div class="highlight"><pre class="chroma"><code class="language-csharp" data-lang="csharp"><span class="k">public </span>{{ template "linkify_param" .ConstructorResource.csharp }}<span class="p">(</span>{{ htmlSafe .ConstructorParams.csharp }}<span class="p">)</span></code></pre></div>
    {{ template "constructor_args" .ConstructorParamsTyped.csharp }}

=== "YAML"
    <div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml">type: {{ template "linkify_param" .ConstructorResource.yaml }}<span class="p"></span>
    {{ template "yaml_constructor" .ConstructorParamsTyped.yaml }}
    </code></pre></div>

---
## {{ .Header.Title }} Resource Properties {#properties}

To learn more about resource properties and how to use them, see [Inputs and Outputs](https://www.pulumi.com/docs/concepts/inputs-outputs/) in the Architecture and Concepts docs.

{{ if ne (len .InputProperties) 0 }}
### Inputs

The {{ .Header.Title }} resource accepts the following [input](https://www.pulumi.com/docs/concepts/inputs-outputs/) properties:

===! "Typescript"
    {{ template "properties" ( index .InputProperties "nodejs" ) }}

=== "Python"
    {{ template "properties" ( index .InputProperties "python" ) }}

=== "Go"
    {{ template "properties" ( index .InputProperties "go" ) }}

=== "C#"
    {{ template "properties" ( index .InputProperties "csharp" ) }}

=== "YAML"
    {{ template "properties" ( index .InputProperties "yaml" ) }}
{{ end }}

<!-- Output properties -->
{{ if or (ne (len ( index .OutputProperties "nodejs" )) 0) (ne (len ( index .OutputProperties "python" )) 0) (ne (len ( index .OutputProperties "go" )) 0) (ne (len ( index .OutputProperties "csharp" )) 0) (ne (len ( index .OutputProperties "yaml" )) 0)}}
---
### Outputs

All [input](#inputs) properties are implicitly available as output properties. Additionally, the {{ .Header.Title }} resource produces the following output properties:

===! "Typescript"
    {{ template "properties" ( index .OutputProperties "nodejs" ) }}

=== "Python"
    {{ template "properties" ( index .OutputProperties "python" ) }}

=== "Go"
    {{ template "properties" ( index .OutputProperties "go" ) }}

=== "C#"
    {{ template "properties" ( index .OutputProperties "csharp" ) }}

=== "YAML"
    {{ template "properties" ( index .OutputProperties "yaml" ) }}
{{ end }}

<!-- Supporting types -->
{{ if ne (len .NestedTypes) 0 }}
---
### Supporting Types

{{- if ge (len .NestedTypes) 200 }}
> **Note:** There are over 200 nested types for this resource.
Only the first 200 types are included in this documentation.
{{ end }}

{{ range $index, $elem := .NestedTypes }}
{{ if lt $index 200 }}
#### {{ htmlSafe $elem.Name }}

===! "Typescript"
    {{ if $elem.Properties }}{{template "properties" ( index $elem.Properties "nodejs" ) }}{{ end }}
    {{ if $elem.EnumValues }}{{template "enums" ( index $elem.EnumValues "nodejs" )}}{{ end }}

=== "Python"
    {{ if $elem.Properties }}{{template "properties" ( index $elem.Properties "python" ) }}{{ end }}
    {{ if $elem.EnumValues }}{{template "enums" ( index $elem.EnumValues "python" )}}{{ end }}

=== "Go"
    {{ if $elem.Properties }}{{template "properties" ( index $elem.Properties "go" ) }}{{ end }}
    {{ if $elem.EnumValues }}{{template "enums" ( index $elem.EnumValues "go" )}}{{ end }}

=== "C#"
    {{ if $elem.Properties }}{{template "properties" ( index $elem.Properties "csharp" ) }}{{ end }}
    {{ if $elem.EnumValues }}{{template "enums" ( index $elem.EnumValues "csharp" )}}{{ end }}

=== "YAML"
    {{ if $elem.Properties }}{{template "properties" ( index $elem.Properties "yaml" ) }}{{ end }}
    {{ if $elem.EnumValues }}{{template "enums" ( index $elem.EnumValues "yaml" )}}{{ end }}


{{- end -}}
{{- end -}}
{{- end -}}